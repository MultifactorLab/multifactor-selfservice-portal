@using MultiFactor.SelfService.Linux.Portal.Core

@model MultiFactor.SelfService.Linux.Portal.ViewModels.LoginViewModel

<div action="#" class="login">
    <div class="form-bg">
        <img src="~/images/login.svg" width="352" height="396" alt="Multifactor">
    </div>
    <div class="form-column">
        <h2>@Localizer["Title"]</h2>
        @using (Html.BeginForm("Login", "Account", new Dictionary<string, string>
        { 
            [Constants.MultiFactorClaims.SamlSessionId] = Context.Request.Query[Constants.MultiFactorClaims.SamlSessionId].FirstOrDefault() ?? string.Empty, 
            [Constants.MultiFactorClaims.OidcSessionId] = Context.Request.Query[Constants.MultiFactorClaims.OidcSessionId].FirstOrDefault() ?? string.Empty
        }, FormMethod.Post))
        {
            <fieldset>
                @Html.AntiForgeryToken()
                <p>@Localizer["Invitation"]</p>
                <div class="form-row">
                    <div class="input">
                        @Html.TextBoxFor(m => m.UserName, new { placeholder = Settings.RequiresUserPrincipalName
                            ? Localizer.GetString("UserNameUpn") 
                            : Localizer.GetString("UserName") })
                        @Html.ValidationMessageFor(m => m.UserName)
                    </div>
                    <div class="input">
                        @Html.PasswordFor(m => m.Password, new { placeholder = Localizer.GetString("Password"), autocomplete = "off" })
                        @Html.ValidationMessageFor(m => m.Password)
                    </div>
                    @Html.ValidationSummary(true)
                    
                    @if (Settings.CaptchaSettings.IsCaptchaEnabled(CaptchaType.Google))
                    {
                        <div class="g-recaptcha" 
                            data-sitekey="@Settings.CaptchaSettings.Key" 
                            data-callback="captchaCallback"
                            data-size="normal">
                        </div>
                    }
                    
                    @if (Settings.CaptchaSettings.IsCaptchaEnabled(CaptchaType.Yandex))
                    {
                        <div id="yandex-captcha-container"></div>
                    }

                </div>

                <div class="form-row">

                    <input type="hidden" name="myUrl" id="myUrl" />

                    @if (Settings.CaptchaSettings.Enabled)
                    {   
                        <!-- Кнопка выключается когда вызывается капча callback -->
                        <input type="hidden" name="responseToken" id="responseToken" />
                        <input type="submit" class="btn" disabled="disabled" value="@Localizer["Submit"]" id="submit" />
                    }
                    else
                    {
                        <input type="submit" class="btn" value="@Localizer["Submit"]" id="submit" />
                    }   
                    
                </div>
            </fieldset>
        }
    </div>
</div>

@section head {

    @if (Settings.CaptchaSettings.IsCaptchaEnabled(CaptchaType.Google))
    {
        <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    }
    @if (Settings.CaptchaSettings.IsCaptchaEnabled(CaptchaType.Yandex))
    {
        <script
            src="https://captcha-api.yandex.ru/captcha.js?render=onload&onload=yandexCaptchaLoadFunction"
            defer
        ></script>
    }
}

@section Scripts {
    
    <partial name="_ValidationScriptsPartial" />

    <script type="text/javascript">
        function enableSubmit() {
            $("form").find(':submit').removeAttr('disabled');
        }

        function captchaCallback(token) {
            $('#responseToken').val(token);
            enableSubmit();
        }

        $(document).ready(function() {
            $('#myUrl').val(document.location);

            $("form").submit(function () {
                if ($(this).valid()) {
                    $(this).find(':submit').attr('disabled', 'disabled').val('@Localizer["PleaseWait"]');
                }
            });
        });
        
        @if (Settings.CaptchaSettings.IsCaptchaEnabled(CaptchaType.Yandex))
        {
            <text>
                function yandexCaptchaLoadFunction() {
                    if (window.smartCaptcha) {
                        const container = document.getElementById('yandex-captcha-container');
                        window.smartCaptcha.render(container, {
                            sitekey: '@Settings.CaptchaSettings.Key',
                            callback:  captchaCallback,
                            hl: '@ApplicationLanguageProvider.GetLanguage()'
                        });
                    }
                }
            </text>
        }
    </script>

}
